generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  role_id   String @id @default(uuid())
  role_name String @unique
  User      User[]
}

model User {
  user_id           String     @id @default(uuid())
  role_id           String
  name              String
  mobile_num        String     @unique
  email             String     @unique
  is_Active         Boolean    @default(false)
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt
  password          String
  token             String?
  otp               String?
  reset_key         String?
  remaining_seconds Int?
  role              Role       @relation(fields: [role_id], references: [role_id], onUpdate: NoAction)
  Address           Address?
  Category          Category[]
}

model Address {
  address_id String   @id @default(uuid())
  user_id    String   @unique
  city       String
  country    String
  district   String
  pincode    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [user_id])
}

model Category {
  category_id String   @id @default(uuid())
  user_id     String //For to know who create a category
  name        String   @unique
  image_url   String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user     User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  Products Products[]
  Orders   Orders[]
}

model Products {
  product_id          String   @id @default(uuid())
  category_id         String
  name                String   @unique
  image_url           String[]
  description         String[]
  price               Int
  strike_price        Int
  discount            Int?
  is_whislist         Boolean  @default(false)
  total_product_count Int
  quantity_count      Int      @default(1)
  is_cart             Boolean  @default(false)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  category  Category    @relation(fields: [category_id], references: [category_id], onDelete: Cascade)
  Wishlists Wishlists?
  Addtocart Addtocart[]
  Orders    Orders[]
}

model Wishlists {
  wishlist_id String   @id @default(uuid())
  product_id  String   @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  products Products @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
}

model Addtocart {
  add_to_cart_id String   @id @default(uuid())
  product_id     String   @unique
  quantity_count Int
  price          Int
  strike_price   Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  products Products @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
}

model Orders {
  order_id     String   @id @default(uuid())
  product_id   String   
  category_id  String
  product_name String
  image_url    String[]
  description  String[]
  order_count  Int
  price        Int
  strike_price Int
  total_price  Int
  status       String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  Product  Products @relation(fields: [product_id], references: [product_id])
  Category Category @relation(fields: [category_id], references: [category_id])
}

model Chatbot {
  chatbot_id   String @id @default(uuid())
  sender_msg   String
  receiver_msg Json
}
